==============================================

(defcustom mtg-language-list

  '(
    )

  "Language names.

`listp' of `symbolp's.

Languages into which cards have been translated."

  :type '(repeat (symbol :tag "Language Name"))

  :safe #'listp
  :group 'mtg)

;;----------------------------------------------;;

(defcustom mtg-language-alist

  (list (mtg-language-create :language ' :abbreviation ')
        (mtg-language-create :language ' :abbreviation ')
        )

  "Language metadata (abbreviations and endonyms).

`listp' of `mtg-language-p's:

â€¢ each â€˜:languageâ€™ should be in `mtg-language-list'."

  :type '(repeat (symbol :tag "Language Info"))

  :safe #'listp
  :group 'mtg)

==============================================

;; Package-Requires: ((emacs "25") (json "1.4"))

;;----------------------------------------------;;

(cl-defun make-mtg-symbol (&key symbol abbreviation (image nil) (char nil))

  "Make an `mtg-symbol'. 

A Smart Constructor â€” validation & defaulting.

Inputs:

â€¢ SYMBOL       â€” a `symbolp'.
â€¢ ABBREVIATION â€” a `symbolp'.
â€¢ IMAGE        â€” an optional `imagep', or `symbolp' thereof.
â€¢ CHAR         â€” an optional `characterp', or `symbolp' thereof.

Examples:

â€¢ M-: (make-mtg-symbol :symbol 'blue-mana :abbreviation 'u :char ?ðŸŒ¢)
   â‡’ #s(mtg-symbol blue-mana u nil 127778)"

  (let* ((SYMBOL       symbol)
         (ABBREVIATION abbreviation)
         (IMAGE        image)
         (CHAR         char)
         )

  (mtg-symbol-create :symbol       SYMBOL
                     :abbreviation ABBREVIATION
                     :image        IMAGE
                     :char         CHAR)))

==============================================

(defun mtg-company (command &optional arg &rest _)

  "Company Backend for MTG Cards.

Inputs:

â€¢ COMMAND â€” a `symbolp'.
  The Company-Command.
â€¢ ARG â€” an `integerp'.
  A Prefix-Argument."

  (case command

    (interactive
     (company-begin-backend 'company-mtg))

    (init    
     (mtg-initialize-cards-by-name-table))

    (prefix
     (mtg-company-grab-card-name))

    (candidates
     ())

    (ignore-case
     'keep-prefix)))

==============================================


(defun mtg-company-grab-card-name ()

  "Grab the â€˜mtg-card-nameâ€™ before `point'.

Idiomatic card names:

â€¢ should (mostly) have capitalized words;
â€¢ may include lowercase articles;
â€¢ may have some punctuation characters (hyphen, apostrophe, colon).

If point is at the end of a word, return it.
Otherwise, if point is not inside a symbol, return an empty string."

  (pcase-let* ((BEG-POINT . END-POINT)
               (bounds-of-thing-at-point 'mtg-card-name))
    (POINT (point))
    (TEXT (buffer-substring BEG-POINT POINT))
    )


  (if (looking-at "\\>")

      (buffer-substring (point) (save-excursion (skip-backward mtg-syntax-card-name-charset-regexp) (point)))

    (unless (and (char-after) (eq (char-syntax (char-after)) ?w))

      "")))

  ()))

==============================================




==============================================

==============================================